 public class LinearGradientColorMap
        {
            private int Total_ColorNumber = 100;
            private Color Background_Color = Color.Black;
            private List<Color> BaseColors = new List<Color>();
            private List<Color> ColorMap = new List<Color>();
            public LinearGradientColorMap()
            {

            }
            public LinearGradientColorMap(int MaxColorNumber)
            {
                this.Total_ColorNumber = MaxColorNumber;
            }
            public void AddBaseColor(Color color)
            {
                BaseColors.Add(color);
                CreateColorMap();
            }
            public Color GetColor(double value)
            {
                int index = (int)(value * Total_ColorNumber);
                if (ColorMap.Count != 0)
                {
                    if (index >= 0 && index < Total_ColorNumber)
                    {
                        return ColorMap[index];
                    }
                }
                return Background_Color;
            }
            public Color GetColor(int index)
            {
                if (ColorMap.Count != 0)
                {
                    if (index >= 0 && index < Total_ColorNumber)
                    {
                        return ColorMap[index];
                    }
                }
                return Background_Color;
            }
            private void CreateColorMap()
            {
                List<Color> TempColorMap = new List<Color>();
                if (BaseColors.Count > 1)
                {
                    int BaseColorNumber = BaseColors.Count;
                    int Each_ColorNumber = Total_ColorNumber / (BaseColorNumber - 1);
                    for (int i = 1; i < BaseColorNumber; i++)
                    {
                        Color Color1 = BaseColors[i - 1];
                        Color Color2 = BaseColors[i];
                        int diff_A = Color2.A - Color1.A;
                        int diff_R = Color2.R - Color1.R;
                        int diff_G = Color2.G - Color1.G;
                        int diff_B = Color2.B - Color1.B;
                        for (int j = 0; j < Each_ColorNumber; j++)
                        {
                            TempColorMap.Add(Color.FromArgb(Color1.A + diff_A * j / Each_ColorNumber, Color1.R + diff_R * j / Each_ColorNumber, Color1.G + diff_G * j / Each_ColorNumber, Color1.B + diff_B * j / Each_ColorNumber));
                        }
                    }
                }
                else
                {
                    for (int j = 0; j < Total_ColorNumber; j++)
                    {
                        TempColorMap.Add(BaseColors[0]);
                    }
                }
                Total_ColorNumber = TempColorMap.Count;
                ColorMap = TempColorMap;
            }
        }
